# -*- coding: UTF-8 -*-

from appium import webdriver
from time import sleep
from unittest import TestCase

import unittest
import datetime
import random
import desired_capabilities

from appium.webdriver.common.touch_action import TouchAction
from selenium.webdriver.common.touch_actions import TouchActions

class MqcTest(TestCase):
    
    global ratioX, ratioY
    global commandMap
    global caseName
    global isUIA
    global udid

    def setUp(self):
        desired_caps = desired_capabilities.get_desired_capabilities()
        self.isUIA = "UIA" in desired_caps['deviceName']
        self.udid = desired_caps['udid']
        try:
            desired_capabilities.XpathUtil
            self.hasUtil = True
        except:
            self.hasUtil = False
            pass
        print "self.hasUtil", self.hasUtil
        uri = desired_capabilities.get_uri()
        retry = 0
        while retry < 3:
            try :
                if self.isUIA:
                    desired_capabilities.dismissAlertAtStart(self.udid)
                self.driver = webdriver.Remote(uri, desired_caps)
                break
            except Exception, e:
                print "Appium server init failed: %s" % str(e)
                retry += 1

        sleep(5)
        self.init()

    def init(self):
        self.window_size  = self.driver.get_window_size()
        self.width = 1080
        self.height = 1920
        self.ratioX = float("%.2f" % (float(self.window_size["width"]) / float(self.width)))
        self.ratioY = self.ratioX
        self.caseName = ""
        self.commandMap = {
            "swipe" : self.swipe,
            "click" : self.click,
            "tap" : self.tap,
            "keycode" : self.keycode,
            "send_text" : self.send_text,
            "sleep" : self.sleep,
            "alert" : self.alert,
            "get_captcha_text" : self.get_captcha_text,
            "send_captcha_text" : self.send_captcha_text,
            "monkey" : self.simple_monkey,
            "exist" : self.exist,
            "click_if_exist" : self.click_if_exist,
        }
        
    def test_case_a(self):
        self.width = 375
        self.height = 667
        self.ratioX = float('%.2f' % (float(self.window_size['width']) / float(self.width)))
        self.ratioY = float('%.2f' % (float(self.window_size['height']) / float(self.height)))
        self.caseName = "test_case_a"
        starttime = datetime.datetime.now()
        steps = [
                #点击控件：允许
                ['click', '//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[6]/XCUIElementTypeOther[2]/XCUIElementTypeAlert[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[2]/XCUIElementTypeOther[3]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[3]/XCUIElementTypeButton[1]', '', '允许', 242.0, 387.0, None, None],
                #滑动：从(347, 379) 6 步滑到 (67, 394)
                ['swipe', [[347.0,379.0],[325.0,380.0],[275.0,386.0],[255.0,387.0],[221.0,387.0],[187.0,392.0],[65.0,392.0],[66.0,393.0],[67.0,394.0]], None],
                #滑动：从(344, 370) 7 步滑到 (17, 356)
                ['swipe', [[344.0,370.0],[65.0,392.0],[341.0,370.0],[2.0,370.0],[326.0,372.0],[345.0,355.0],[347.0,354.0],[15.0,354.0],[16.0,355.0],[17.0,356.0]], None], 
                #滑动：从(344, 370) 7 步滑到 (17, 356)
                ['swipe', [[344.0,370.0],[65.0,392.0],[341.0,370.0],[2.0,370.0],[326.0,372.0],[345.0,355.0],[347.0,354.0],[15.0,354.0],[16.0,355.0],[17.0,356.0]], None],
                #滑动：从(357, 342) 3 步滑到 (39, 344)
                ['swipe', [[357.0,342.0],[15.0,354.0],[352.0,342.0],[37.0,342.0],[38.0,343.0],[39.0,344.0]], None],
                #点击控件：立即体验
                ['click', '//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[1]/XCUIElementTypeOther[1]/XCUIElementTypeScrollView[1]/XCUIElementTypeImage[1]/XCUIElementTypeButton[1]', '', '立即体验', 200.0, 637.0, None, None],
                #点击控件：banner_zhengzaijiazai
                ['click', '//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeTable[1]/XCUIElementTypeOther[1]/XCUIElementTypeImage[1]', '', 'banner_zhengzaijiazai', 336.0, 119.0, None, None],
                #点击控件：我的
                ['click', '//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[1]/XCUIElementTypeOther[1]/XCUIElementTypeTabBar[1]/XCUIElementTypeButton[3]', '', '我的', 306.0, 654.0, None, None],
                #点击控件：进入账户
                ['click', '//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[2]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeButton[1]', '', '进入账户', 210.0, 510.0, None, None],
                #点击控件：手机号
                ['click', '//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[2]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeTextField[1]', '手机号', '', 177.0, 217.0, None, None],
                #在控件 手机号 上输入 13291488404
                ['send_text', '//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[2]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeTextField[1]', '手机号', '13291488404', None, ''],
                #点击控件：请输入密码
                ['click', '//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeSecureTextField[1]', '请输入密码', '', 186.0, 274.0, None, None],
                #在控件 请输入密码 上输入 opewoq
                ['send_text', '//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeSecureTextField[1]', '请输入密码', '123456', None, ''],
                #点击控件：登录
                ['click', '//XCUIElementTypeApplication[1]/XCUIElementTypeWindow[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeButton[1]', '', '登录', 207.0, 387.0, None, None],
                ]
        self.drive(steps)
        stoptime = datetime.datetime.now()
        self.log("time", "case cost " + str((stoptime-starttime).seconds) + " seconds")


    #####################################################################################
    # this function drives the steps in cases.
    # It's more stable, more easier to expand.
    # Arguments:
    #   steps, an array contains all the actions data in each action. Each action contains 
    #   commandType and command datas.
    #####################################################################################
    def drive(self, steps):
        i = 0
        continuous_fail_steps = 0
        while i < len(steps):
            # sleep(2)
            self.log("step", "step %d begin, screenshot %s" % ((i+1), self.caseName + "_" + str(i+1)))
            step = steps[i]
            retry = 0
            if len(step) > 0:
                while True:
                    try:
                        if retry < 2:
                            skipNum = self.commandMap[step[0]](*step[1:])
                            if step[0] == "exist" : 
                                i += skipNum
                            continuous_fail_steps = 0
                            break
                    except Exception,e:
                        self.log("ERROR", str(e))

                    if retry < 2:
                        retry += 1
                    else:
                        # failed 2 times , try click by point
                        if step[0] == "click" : 
                            try:
                                self.tap(step[4], step[5])
                                self.log("info", "click point ( %d , %d )" % (step[4], step[5]))
                            except:
                                pass
                        continuous_fail_steps += 1
                        break
            
            #move to next step.
            self.screencap(self.caseName + "_" + str(i+1))
            if continuous_fail_steps != 0:
                self.log("FATAL", "step failed")
            i+=1

    def tearDown(self):
        ## Just ignore it. Cases are done.
        try:
            self.driver.quit()
        except:
            pass

    #########################################################
    # the flollowing code is command types' implementation.
    #########################################################
    def swipe(self, points, dir):
        if dir is not None:
            if dir == 'up':
                self.driver.swipe(self.window_size["width"] * 0.5, self.window_size["height"] * 0.8, 0, self.window_size["height"] * (-0.6), 1000)
            elif dir == 'down':
                self.driver.swipe(self.window_size["width"] * 0.5, self.window_size["height"] * 0.2, 0, self.window_size["height"] * 0.6, 1000)
            elif dir == 'left':
                self.driver.swipe(self.window_size["width"] * 0.9, self.window_size["height"] * 0.5, self.window_size["width"] * (-0.8), 0, 1000)
            elif dir == 'right':
                self.driver.swipe(self.window_size["width"] * 0.1, self.window_size["height"] * 0.5, self.window_size["width"] * 0.8, 0, 1000)
            return
        last_x = 0
        last_y = 0

        action_appium = TouchAction(self.driver)

        x1 = float(points[0][0]) * self.ratioX
        y1 = float(points[0][1]) * self.ratioY
        x2 = float(points[len(points) - 1][0]) * self.ratioX
        y2 = float(points[len(points) - 1][1]) * self.ratioY
        self.driver.swipe(x1, y1, x2 - x1, y2 - y1, 500)

    def get_captcha_text(self, xpath, resource_id, desc, x, y, index = None, time = None, isAssert = True):
        try:
            el = self.wait_for_element(xpath = xpath, id = resource_id, text = desc, index = index)
            screenshot_file="./captcha.png"
            if self.driver.get_screenshot_as_file(screenshot_file):
                el_location = el.location
                el_size = el.size
                coordinates = {}
                coordinates['left'] = el_location['x'] * 1.0 / self.window_size['width']
                coordinates['right'] = (el_location['x'] + el_size['width']) * 1.0 / self.window_size['width']
                coordinates['top'] = el_location['y'] * 1.0 / self.window_size['height']
                coordinates['bottom'] =  (el_location['y']+ el_size['height']) * 1.0 / self.window_size['height']
                print "coordinates:", coordinates
                self.captcha_text = self.validate_code_ocr(screenshot_file, coordinates)
                print "captcha_text:", self.captcha_text
            else:
                print "screenshot failed"
        except:
            raise Exception("get_captcha_text text[%s] not found" % (resource_id))
    
    def validate_code_ocr(self, img_file_name, coordinates):
        try:
            import KeyboardOCR
        except ImportError:
            print 'do not support KeyboardOCR'
            return None
        validateCodeOCR = KeyboardOCR.ValidateCodeOCR()
        validateCodeOCR.setImageFilePathRelativeCoordination(img_file_name, coordinates)
        rects = validateCodeOCR.imageSplit()
        print rects
        retList = validateCodeOCR.rectOCR(rects)
        # validateCodeOCR.cleanup(img_file_name) # delete image file
        print retList
        if retList is None or len(retList) != 4:
            return None
        else:
            return ''.join(retList)

    def exist(self, xpath, resource_id, desc, x, y, index, skipNum):
        print "exist skipNum:", skipNum
        if (xpath is not None and xpath != '') or \
           (resource_id is not None and resource_id != '') or \
           (desc is not None and desc != ''):
            try:
                appium_element = self.wait_for_element(xpath=xpath, id=resource_id, text=desc, index=index)
                print "element", desc, "exists"
                return 0
            except:
                print "element", desc, "doesn't exist, then", skipNum, "steps are skipped"
                return skipNum
    
    def click(self, xpath, resource_id, desc, x, y, index = None, time = None, isAssert = True):
        # trying to click xpath
        if (xpath is not None and xpath != '') or \
           (resource_id is not None and resource_id != '') or \
           (desc is not None and desc != ''):
            try:
                appium_element = self.wait_for_element(xpath=xpath, id=resource_id, text=desc, index=index)
                if time is not None:
                    TouchAction(self.driver).long_press(appium_element, None, None, float(time)/1000).perform()
                else:
                    try:
                        appium_element.click()
                    except Exception, e:
                        print Exception, 'click failed', e
                        sleep(1)
                        TouchAction(self.driver).press(appium_element).wait(20).release().perform()
                        pass
                if isAssert :
                    self.log("assert", "true")
                return True
            except:
                pass
            if isAssert :
                self.log("assert", "false")
            if time is not None:
                raise Exception("longclick element id[%s] text[%s] %dms not found" % (resource_id, desc, time))
            else:
                raise Exception("click element id[%s] text[%s] not found" % (resource_id, desc))
        else:
            #trying to click position
            if x>0 and y>0:
                try:
                    self.tap(x,y,time)
                    return True
                except:
                    pass
            if time is not None:
                raise Exception("longclick point (%d, %d) %dms failed" % (x, y, time))
            else:
                raise Exception("click point (%d, %d) failed" % (x, y))

    # if we cannot find the element by xpath, then we do nothing
    def click_if_exist(self, xpath, resource_id, desc, x, y, index = None, time = None, isAssert = True):
        return self.click(xpath, resource_id, desc, x, y, index, time, isAssert)

    def tap(self, x, y, time = None):
        x = float(x) * self.ratioX
        y = float(y) * self.ratioY
        self.log("info", "tap point (%d, %d)" % (x, y))
        if time is not None:
            self.driver.swipe(x, y, 0, 0, time) # touchAndHold
        else:
            if self.isUIA:
                TouchAction(self.driver).press(None, x, y).wait(20).release().perform()
            else:
                TouchAction(self.driver).press(None, x, y).release().perform()

    def keycode(self, codes):
        try :
            for a, b in codes:
                self.driver.press_keycode(a, b)
        except :
            return False
        return True

    def keycodeChar(self, char):
        try :
            if char.isdigit():
                self.driver.press_keycode(int(char) + 7, None)
            else:
                meta = None
                if char.isupper():
                    meta = 1
                    char = char.lower()
                self.driver.press_keycode(ord(char)-ord('a')+29, meta)
        except :
            return False
        return True

    def send_text(self, xpath, resource_id, input, index=None, desc=None):
        try:
            el = self.wait_for_element(xpath = xpath, id = resource_id, text = desc, index = index)
            el.send_keys(input.decode('UTF-8'))
            return True
        except:
            raise Exception("send text id[%s] text[%s] not found" % (id, resource_id))
    
    def send_captcha_text(self, xpath, resource_id, input, index=None, desc=None):
        try:
            print 'send_captcha_text:', self.captcha_text
            if self.captcha_text != None and len(self.captcha_text) > 0:
                return self.send_text(xpath, resource_id, self.captcha_text, index, desc)
            else:
                return self.send_text(xpath, resource_id, input, index, desc)
            self.captcha_text = None
        except:
            raise Exception("send_captcha_text text id[%s] text[%s] not found" % (id, resource_id))

    def sleep(self, time):
        sleep(time)

    def tapLocal(self, x, y):
        if self.isUIA:
            TouchAction(self.driver).press(None, x, y).wait(20).release().perform()
        else:
            TouchAction(self.driver).press(None, x, y).release().perform()

    def simple_monkey(self):
        print "monkey begins"
        width_int = int(self.window_size["width"]) - 1
        height_int = int(self.window_size["height"]) - 1
        for i in range(0,1000):
            x = random.randint(1, width_int)
            y = random.randint(1, height_int)
            print i, x, y 
            self.tapLocal(x, y)
        print "monkey ends"

    def alert(self):
        print("find alerts and accept them")
        try:
            sleep(3)
            if self.isUIA:
                desired_capabilities.dismissAlert(self.udid)
                return
            buttons = self.driver.find_elements_by_xpath("//XCUIElementTypeAlert//XCUIElementTypeButton")
            while len(buttons) > 0:
                # accept alert
                isAccept = False
                for i in range(0, len(buttons)):
                    btnName = buttons[i].get_attribute('name')
                    print ( ("find alert %d, %s") % (i, btnName) )
                    if (btnName is not None):
                        btnNameLower = btnName.encode('UTF-8').lower()
                        if (btnNameLower in ['允许', 'allow', '好', 'ok', 'yes', '确定']):
                            print ( ("accept alert, %d, %s") % (i, btnNameLower))
                            isAccept = True
                            buttons[i].click()
                            break
                # randomly dismiss alert
                if (not isAccept):
                    print ( ("dismiss alert, %s") % (btnNameLower))
                    buttons[0].click()
                # check if there is another alert
                sleep(3)
                buttons = self.driver.find_elements_by_xpath("//XCUIElementTypeAlert//XCUIElementTypeButton")
        except Exception, e:
            print Exception, ":", e
            pass

    ###############################################
    # the following are private codes.
    ###############################################
    def id(self, resource_id):
        return resource_id

    def screencap(self, picName=None):
        try:
            if picName is not None:
                self.log("screenshot", picName)
            else:
                self.log("screenshot", " ")
            sleep(3)
        except:
            pass

    def log(self, level, info):
        print "%s : %s" % (level, info)
        desired_capabilities.flushio()

    def getXpathforIndexedElement(self, isUIA, last_el, name, value):
        xpath = ""
        if isUIA:
            xpath += "//UIA" + last_el[len("XCUIElementType"):]
        else:
            xpath += "//" + last_el
        conditionStr = ''
        if name == '' or name is None:
            conditionStr += "(not(@name) or @name='') and "
            if value == '' or value is None:
                conditionStr += "(not(@value) or @value='')"
            else:
                conditionStr += "(@value='" + value + "')"
        else:
            conditionStr += "(@name='" + name + "') and "
            if value == '' or value is None or value == name:
                conditionStr += "(not(@value) or @value='' or @value='" + name + "')"
            else:
                conditionStr += "(@value='" + value + "')"
        xpath = xpath + "[" + conditionStr + "]"
        print "indexed xpath:", xpath
        return xpath

    def wait_for_element(self, xpath=None, id=None, text=None, index=None):
        time = 0
        while True:
            # try to find element by indexed_xpath.
            try:
                if (index is not None and index > 0):
                    last_el = XpathUtilLocal(self.isUIA, self.driver).get_last_el_of_xpath(xpath);
                    print 'index:',index, "  last_el:",last_el
                    if "Other" not in last_el and "Cell" not in last_el:
                        indexed_xpath = self.getXpathforIndexedElement(self.isUIA, last_el, text, id)
                        els = self.driver.find_elements_by_xpath(indexed_xpath)
                        print "len(els):",len(els),"  index:", index
                        if (len(els) >= index):
                            self.log("info", "Find element with indexed_xpath success")
                            if (len(els) < 20):
                                els.sort(cmp)
                                print "after cmp"
                            else:
                                print "sort may take up too much time, so we skip it"
                            return els[index - 1]
                        else:
                            self.log("info", "len(els) <= index")
            except Exception, e:
                print Exception, "indexed_xpath:", e
                pass
            # try to find element by xpath.
            try:
                if xpath is not None:
                    el = XpathUtilLocal(self.isUIA, self.driver).get_el_by_xpath(xpath, text);
                    if el is not None:
                        return el
            except Exception, e:
                print Exception, "xpath:", e
                pass

            # try to find element by text.
            try:
                if text is not None and text != '':
                    print "try to find element with name:", text
                    el = self.driver.find_element_by_name(text)
                    self.log("info", "Find element with name success")
                    return el
            except:
                pass

            sleep(2)
            time += 1
            if time > 1:
                raise Exception("Element id[%s] text[%s] not found in %d times" % (id, text, time))
                break

    def floatrange(self, start, stop, steps):
        return [start + float(i) * (stop - start) / (float(steps) - 1) for i in range(steps)]

def setElementDict(el, key):
    if not el.__dict__.has_key(key):
        if key == 'my_x':
            global cc1
            el_localtion = el.location
            el.__dict__['my_x'] = el_localtion['x']
            el.__dict__['my_y'] = el_localtion['y']
        if key == 'my_width':
            global cc2
            el_size = el.size
            el.__dict__['my_width'] = el_size['width']
            el.__dict__['my_height'] = el_size['height']

def cmp(e1, e2):
    setElementDict(e1, 'my_x')
    setElementDict(e2, 'my_x')
    if abs(e1.__dict__['my_y'] - e2.__dict__['my_y']) > 0.01:
        return int(e1.__dict__['my_y'] - e2.__dict__['my_y'])
    if abs(e1.__dict__['my_x'] - e2.__dict__['my_x']) > 0.01:
        return int(e1.__dict__['my_x'] - e2.__dict__['my_x'])
    setElementDict(e1, 'my_width')
    setElementDict(e2, 'my_width')
    if abs(e1.__dict__['my_width'] - e2.__dict__['my_width']) > 0.01:
        return int(e1.__dict__['my_width'] - e2.__dict__['my_width'])
    if abs(e1.__dict__['my_height'] - e2.__dict__['my_height']) > 0.01:
        return int(e1.__dict__['my_height'] - e2.__dict__['my_height'])
    return -1

class XpathUtilLocal:
    def __init__(self, isUIA, driver):
        self.isUIA = isUIA
        self.driver = driver
    
    def get_last_el_of_xpath(self, xpath):
        try:
            index1 = xpath.rfind('/')
            last_full_el = xpath[index1 + 1:]
            # print "last_full_el:", last_full_el
            index2 = last_full_el.find('[')
            if index2 == -1:
                last_el = last_full_el
                # print "last_el:", last_el
                return last_el
            else:
                last_el = last_full_el[:index2]
                # print "last_el:", last_el
                return last_el
        except Exception, e:
            print Exception, "get_last_el_of_xpath:",xpath, e
            pass
        return ''
    
    def get_fuzzy_xpath(self, xpath):
        fuzzy_xpath = ''
        elementList = xpath.split('/')
        for element in elementList:
            if element != '' and "XCUIElementTypeOther" not in element:
                if "XCUIElement" in element or "UIA" in element:
                    if element[len(element)-1] == "]":
                        if element.rfind(']') - element.rfind('[') < 3:
                            element = element[0:element.rfind('[')]
                    fuzzy_xpath += "//" + element
                else:
                    print "get_fuzzy_xpath error", xpath
        return fuzzy_xpath
    
    def get_uia_xpath(self, wdaXPath, text):
        print "wdaxpath:", wdaXPath
        if "XCUIElementType" not in wdaXPath:
            return wdaXPath
        elementList = wdaXPath[2:].split('/')
        uiaXpath = '/'
        isTableGroup = False
        for element in elementList:
            if  element != '' and "XCUIElementTypeOther" not in element:
                endIndex = len(element)
                if text is not None:
                    tmpIndex = element.find('[')
                    endIndex = tmpIndex if tmpIndex != -1 else len(element) 
                if "XCUIElementTypeMenu[" in element:
                    uiaXpath += "/UIAEditingMenu" + element[len("XCUIElementTypeMenu"):endIndex]
                elif "XCUIElementTypeMenuItem[" in element:
                    uiaXpath += "/UIAElement" + element[len("XCUIElementTypeMenuItem"):endIndex]
                elif "XCUIElementTypeTable[" in element:
                    uiaXpath += "/UIATableView" + element[len("XCUIElementTypeTable"):endIndex]
                elif "XCUIElementTypeCell[" in element:
                    last_el = self.get_last_el_of_xpath(uiaXpath)
                    print "Cell", last_el
                    if "Table" in last_el:
                        uiaXpath += "/UIATableCell" + element[len("XCUIElementTypeCell"):endIndex]
                    elif "Collection" in last_el:
                        uiaXpath += "/UIACollectionCell" + element[len("XCUIElementTypeCell"):endIndex]
                    else:
                        print "Unexpected Cell", wdaXPath
                        uiaXpath += "/UIATableCell" + element[len("XCUIElementTypeCell"):endIndex]
                elif "XCUIElementTypeStaticText[" in element:
                    last_el = self.get_last_el_of_xpath(uiaXpath)
                    print "StaticText last_el:", last_el
                    if "TableView" in last_el:
                        isTableGroup = True
                        uiaXpath += "//UIA" + element[15:endIndex]
                    else:
                        uiaXpath += "/UIA" + element[15:endIndex]
                else:
                    uiaXpath += "/UIA" + element[15:endIndex]
        if text is not None:
            if uiaXpath[len(uiaXpath)-1] == "]":
                uiaXpath = uiaXpath[0:uiaXpath.rfind('[')]
            if isTableGroup:
                uiaXpath += "[contains(@name,'" + text + "')]"
            else:
                if text == '':
                    last_el = self.get_last_el_of_xpath(uiaXpath)
                    if ('TextView' in last_el or 'TextField' in last_el):
                        uiaXpath += "[@visible='true']"
                    else:
                        uiaXpath += "[not(@name) or @name='']"
                else:
                    if "UIAKeyboard" in uiaXpath and "UIAKey" in uiaXpath:
                        if text == "delete":
                            uiaXpath += "[@name='delete' or @name='Delete']"
                        else:
                            uiaXpath += "[@name='" + text + "']"
                    else:
                        uiaXpath += "[@name='" + text + "']"

        # print uiaXpath
        return uiaXpath
    
    def get_wda_xpath(self, xpath, text):
        if "XCUIElementType" not in xpath:
            return xpath
        elementList = xpath[2:].split('/')
        wda_xpath = '/'
        for element in elementList:
            if element != '':
                if "XCUIElementTypeOther" in element:
                    wda_xpath += "/XCUIElementTypeOther"
                else:
                    wda_xpath += "/" + element
        if text is not None and wda_xpath[len(wda_xpath)-1] == "]":
            wda_xpath = wda_xpath[0:wda_xpath.rfind('[')]
        if (text is not None and text != ''):
            wda_xpath += "[@name='" + text + "']"
        else:
            wda_xpath += "[not(@name) or @name='']"
        # print wda_xpath
        return wda_xpath
    
    def get_matched_xpath(self, xpath, text):
        matched_xpath = None
        if self.isUIA:
            matched_xpath = self.get_uia_xpath(xpath, text)
        else:
            if text is None:
                matched_xpath = xpath
            else:
                matched_xpath = self.get_wda_xpath(xpath, text)
        print 'xpath:', matched_xpath
        return matched_xpath
    
    def get_el_by_xpath(self, xpath, text):
        el = None
        xpath1 = ''
        try:
            xpath1 = self.get_matched_xpath(xpath, None)
            el = self.driver.find_element_by_xpath(xpath1)
        except Exception, e:
            print Exception, "xpath1 Exception:", e
            pass
        
        if el is not None:
            elName = el.get_attribute('name')
            print "(elName,text,result):(%s,%s,%s)" % (elName, text, elName==text)
            if elName == text or (elName is None and text == ''):
                self.log("info", "Find element with xpath1 success")
                return el
        
        xpath2 = ''
        try:
            xpath2 = self.get_matched_xpath(xpath, text)
            el = self.driver.find_element_by_xpath(xpath2)
            self.log("info", "Find element with xpath2 success")
            return el
        except Exception, e:
            print Exception, "xpath2 Exception:", e
            pass
        
        try:
            xpath3 = self.get_fuzzy_xpath(xpath2)
            print 'xpath3:', xpath3
            el = self.driver.find_element_by_xpath(xpath3)
            self.log("info", "Find element with xpath3 success")
            return el
        except Exception, e:
            print Exception, "xpath3 Exception:", e
            pass
        
        if "@visible='true'" in xpath2 or "@name=''" not in xpath2:
            xpath4 = "//" + xpath2[xpath2.rfind('/') + 1:]
            print 'xpath4:', xpath4
            el = self.driver.find_element_by_xpath(xpath4)
            self.log("info", "Find element with xpath4 success")
            return el
        else:
            return None
    
    def log(self, level, info):
        print "%s : %s" % (level, info)

if __name__ == '__main__':
    try: unittest.main()
    except SystemExit: pass
